// Mocks generated by Mockito 5.4.4 from annotations
// in trip_planner/test/features/day_trips/data/repositories/day_trips_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_crashlytics/firebase_crashlytics.dart' as _i9;
import 'package:flutter/material.dart' as _i6;
import 'package:flutter_polyline_points/flutter_polyline_points.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trip_planner/features/day_trips/data/datasources/day_trips_data_source.dart'
    as _i3;
import 'package:trip_planner/features/day_trips/domain/entities/day_trip.dart'
    as _i5;
import 'package:trip_planner/features/day_trips/domain/entities/trip_stops_directions.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DayTripsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDayTripsDataSource extends _i1.Mock
    implements _i3.DayTripsDataSource {
  @override
  _i4.Future<void> addDayTrip({
    required String? tripId,
    required _i5.DayTrip? dayTrip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDayTrip,
          [],
          {
            #tripId: tripId,
            #dayTrip: dayTrip,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i5.DayTrip>> listenDayTrips(String? tripId) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenDayTrips,
          [tripId],
        ),
        returnValue: _i4.Stream<List<_i5.DayTrip>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i5.DayTrip>>.empty(),
      ) as _i4.Stream<List<_i5.DayTrip>>);

  @override
  _i4.Future<void> updateDayTripsIndexes({
    required String? tripId,
    required List<_i5.DayTrip>? dayTrips,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDayTripsIndexes,
          [],
          {
            #tripId: tripId,
            #dayTrips: dayTrips,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateDayTrip({
    required String? id,
    required String? tripId,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDayTrip,
          [],
          {
            #id: id,
            #tripId: tripId,
            #description: description,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateDayTripStartTime({
    required String? id,
    required String? tripId,
    required _i6.TimeOfDay? startTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDayTripStartTime,
          [],
          {
            #id: id,
            #tripId: tripId,
            #startTime: startTime,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDayTrip({
    required String? tripId,
    required String? dayTripId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDayTrip,
          [],
          {
            #tripId: tripId,
            #dayTripId: dayTripId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveTripStopsDirections({
    required String? tripId,
    required String? dayTripId,
    required List<_i7.TripStopsDirections>? tripStopsDirections,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTripStopsDirections,
          [],
          {
            #tripId: tripId,
            #dayTripId: dayTripId,
            #tripStopsDirections: tripStopsDirections,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i5.DayTrip> listenDayTrip(
    String? tripId,
    String? dayTripId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenDayTrip,
          [
            tripId,
            dayTripId,
          ],
        ),
        returnValue: _i4.Stream<_i5.DayTrip>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.DayTrip>.empty(),
      ) as _i4.Stream<_i5.DayTrip>);

  @override
  dynamic updateTripStopsDirectionsUpToDate({
    required String? tripId,
    required String? dayTripId,
    required bool? isUpToDate,
    _i8.TravelMode? travelMode,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTripStopsDirectionsUpToDate,
          [],
          {
            #tripId: tripId,
            #dayTripId: dayTripId,
            #isUpToDate: isUpToDate,
            #travelMode: travelMode,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateDayTripShowDirections({
    required String? tripId,
    required String? dayTripId,
    required bool? showDirections,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateDayTripShowDirections,
          [],
          {
            #tripId: tripId,
            #dayTripId: dayTripId,
            #showDirections: showDirections,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateDayTripUseDifferentDirectionsColors({
    required String? tripId,
    required String? dayTripId,
    required bool? useDifferentDirectionsColors,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateDayTripUseDifferentDirectionsColors,
          [],
          {
            #tripId: tripId,
            #dayTripId: dayTripId,
            #useDifferentDirectionsColors: useDifferentDirectionsColors,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FirebaseCrashlytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCrashlytics extends _i1.Mock
    implements _i9.FirebaseCrashlytics {
  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isCrashlyticsCollectionEnabled => (super.noSuchMethod(
        Invocation.getter(#isCrashlyticsCollectionEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i4.Future<bool> checkForUnsentReports() => (super.noSuchMethod(
        Invocation.method(
          #checkForUnsentReports,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void crash() => super.noSuchMethod(
        Invocation.method(
          #crash,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> deleteUnsentReports() => (super.noSuchMethod(
        Invocation.method(
          #deleteUnsentReports,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> didCrashOnPreviousExecution() => (super.noSuchMethod(
        Invocation.method(
          #didCrashOnPreviousExecution,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> recordError(
    dynamic exception,
    StackTrace? stack, {
    dynamic reason,
    Iterable<Object>? information = const [],
    bool? printDetails,
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {
            #reason: reason,
            #information: information,
            #printDetails: printDetails,
            #fatal: fatal,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> recordFlutterError(
    _i6.FlutterErrorDetails? flutterErrorDetails, {
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFlutterError,
          [flutterErrorDetails],
          {#fatal: fatal},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> recordFlutterFatalError(
          _i6.FlutterErrorDetails? flutterErrorDetails) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFlutterFatalError,
          [flutterErrorDetails],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> log(String? message) => (super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendUnsentReports() => (super.noSuchMethod(
        Invocation.method(
          #sendUnsentReports,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCrashlyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCrashlyticsCollectionEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setUserIdentifier(String? identifier) => (super.noSuchMethod(
        Invocation.method(
          #setUserIdentifier,
          [identifier],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCustomKey(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomKey,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
