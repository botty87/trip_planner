// Mocks generated by Mockito 5.4.2 from annotations
// in trip_planner/test/features/day_trips/domain/repositories/mock_day_trips_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trip_planner/features/day_trips/domain/entities/day_trip.dart'
    as _i6;
import 'package:trip_planner/features/day_trips/domain/repositories/day_trips_repository.dart'
    as _i3;
import 'package:trip_planner/features/day_trips/errors/day_trips_failure.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DayTripsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDayTripsRepository extends _i1.Mock
    implements _i3.DayTripsRepository {
  @override
  _i4.Future<_i2.Either<_i5.DayTripsFailure, void>> addDayTrip({
    required String? tripId,
    required _i6.DayTrip? dayTrip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDayTrip,
          [],
          {
            #tripId: tripId,
            #dayTrip: dayTrip,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
            _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #addDayTrip,
            [],
            {
              #tripId: tripId,
              #dayTrip: dayTrip,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
                _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #addDayTrip,
            [],
            {
              #tripId: tripId,
              #dayTrip: dayTrip,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>);
  @override
  _i4.Stream<_i2.Either<_i5.DayTripsFailure, List<_i6.DayTrip>>> listenDayTrips(
          String? tripId) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenDayTrips,
          [tripId],
        ),
        returnValue: _i4
            .Stream<_i2.Either<_i5.DayTripsFailure, List<_i6.DayTrip>>>.empty(),
        returnValueForMissingStub: _i4
            .Stream<_i2.Either<_i5.DayTripsFailure, List<_i6.DayTrip>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.DayTripsFailure, List<_i6.DayTrip>>>);
  @override
  _i4.Future<_i2.Either<_i5.DayTripsFailure, void>> updateDayTripsIndexes({
    required String? tripId,
    required List<_i6.DayTrip>? dayTrips,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDayTripsIndexes,
          [],
          {
            #tripId: tripId,
            #dayTrips: dayTrips,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
            _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #updateDayTripsIndexes,
            [],
            {
              #tripId: tripId,
              #dayTrips: dayTrips,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
                _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #updateDayTripsIndexes,
            [],
            {
              #tripId: tripId,
              #dayTrips: dayTrips,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.DayTripsFailure, void>> updateDayTrip({
    required String? id,
    required String? tripId,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDayTrip,
          [],
          {
            #id: id,
            #tripId: tripId,
            #description: description,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
            _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #updateDayTrip,
            [],
            {
              #id: id,
              #tripId: tripId,
              #description: description,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
                _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #updateDayTrip,
            [],
            {
              #id: id,
              #tripId: tripId,
              #description: description,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.DayTripsFailure, void>> updateDayTripStartTime({
    required String? id,
    required String? tripId,
    required _i7.TimeOfDay? startTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDayTripStartTime,
          [],
          {
            #id: id,
            #tripId: tripId,
            #startTime: startTime,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
            _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #updateDayTripStartTime,
            [],
            {
              #id: id,
              #tripId: tripId,
              #startTime: startTime,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
                _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #updateDayTripStartTime,
            [],
            {
              #id: id,
              #tripId: tripId,
              #startTime: startTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.DayTripsFailure, void>> deleteDayTrip({
    required String? tripId,
    required String? dayTripId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDayTrip,
          [],
          {
            #tripId: tripId,
            #dayTripId: dayTripId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
            _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #deleteDayTrip,
            [],
            {
              #tripId: tripId,
              #dayTripId: dayTripId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>.value(
                _FakeEither_0<_i5.DayTripsFailure, void>(
          this,
          Invocation.method(
            #deleteDayTrip,
            [],
            {
              #tripId: tripId,
              #dayTripId: dayTripId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.DayTripsFailure, void>>);
}
