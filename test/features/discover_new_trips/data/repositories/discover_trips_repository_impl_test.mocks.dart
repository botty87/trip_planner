// Mocks generated by Mockito 5.4.2 from annotations
// in trip_planner/test/features/discover_new_trips/data/repositories/discover_trips_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:trip_planner/features/day_trips/domain/entities/day_trip.dart'
    as _i5;
import 'package:trip_planner/features/discover_new_trips/data/datasources/discover_trips_data_source.dart'
    as _i2;
import 'package:trip_planner/features/trip_stops/domain/entities/trip_stop.dart'
    as _i6;
import 'package:trip_planner/features/trips/domain/entities/trip.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DiscoverTripsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscoverTripsDataSource extends _i1.Mock
    implements _i2.DiscoverTripsDataSource {
  @override
  _i3.Future<List<_i4.Trip>> getPublicTrips(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicTrips,
          [userId],
        ),
        returnValue: _i3.Future<List<_i4.Trip>>.value(<_i4.Trip>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Trip>>.value(<_i4.Trip>[]),
      ) as _i3.Future<List<_i4.Trip>>);

  @override
  _i3.Future<List<_i5.DayTrip>> getPublicDayTrips(String? tripId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicDayTrips,
          [tripId],
        ),
        returnValue: _i3.Future<List<_i5.DayTrip>>.value(<_i5.DayTrip>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.DayTrip>>.value(<_i5.DayTrip>[]),
      ) as _i3.Future<List<_i5.DayTrip>>);

  @override
  _i3.Future<List<_i6.TripStop>> getPublicTripStops(
    String? tripId,
    String? dayTripId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicTripStops,
          [
            tripId,
            dayTripId,
          ],
        ),
        returnValue: _i3.Future<List<_i6.TripStop>>.value(<_i6.TripStop>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i6.TripStop>>.value(<_i6.TripStop>[]),
      ) as _i3.Future<List<_i6.TripStop>>);
}
