// Mocks generated by Mockito 5.4.2 from annotations
// in trip_planner/test/features/trip_stops/presentation/cubit/trip_stop_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trip_planner/features/trip_stops/domain/repositories/trip_stops_repository.dart'
    as _i3;
import 'package:trip_planner/features/trip_stops/domain/usecases/delete_trip_stop.dart'
    as _i8;
import 'package:trip_planner/features/trip_stops/domain/usecases/trip_stop_done.dart'
    as _i4;
import 'package:trip_planner/features/trip_stops/domain/usecases/update_trip_stop.dart'
    as _i9;
import 'package:trip_planner/features/trip_stops/domain/usecases/update_trip_stop_note.dart'
    as _i7;
import 'package:trip_planner/features/trip_stops/errors/trip_stops_failure.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTripStopsRepository_1 extends _i1.SmartFake
    implements _i3.TripStopsRepository {
  _FakeTripStopsRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TripStopDone].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripStopDone extends _i1.Mock implements _i4.TripStopDone {
  @override
  _i5.Future<_i2.Either<_i6.TripStopsFailure, void>> call(
          _i4.TripStopDoneParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
            _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
                _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>);
}

/// A class which mocks [UpdateTripStopNote].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTripStopNote extends _i1.Mock
    implements _i7.UpdateTripStopNote {
  @override
  _i5.Future<_i2.Either<_i6.TripStopsFailure, void>> call(
          _i7.UpdateTripStopNoteParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
            _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
                _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>);
}

/// A class which mocks [DeleteTripStop].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTripStop extends _i1.Mock implements _i8.DeleteTripStop {
  @override
  _i3.TripStopsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTripStopsRepository_1(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTripStopsRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.TripStopsRepository);
  @override
  _i5.Future<_i2.Either<_i6.TripStopsFailure, void>> call(
          _i8.DeleteTripStopParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
            _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
                _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>);
}

/// A class which mocks [UpdateTripStop].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTripStop extends _i1.Mock implements _i9.UpdateTripStop {
  @override
  _i3.TripStopsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTripStopsRepository_1(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTripStopsRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.TripStopsRepository);
  @override
  _i5.Future<_i2.Either<_i6.TripStopsFailure, void>> call(
          _i9.UpdateTripStopParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
            _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>.value(
                _FakeEither_0<_i6.TripStopsFailure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.TripStopsFailure, void>>);
}
