// Mocks generated by Mockito 5.4.2 from annotations
// in trip_planner/test/features/trip_stops/domain/repositories/mock_trip_stops_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i7;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trip_planner/features/trip_stops/domain/repositories/trip_stops_repository.dart'
    as _i3;
import 'package:trip_planner/features/trip_stops/errors/trip_stops_failure.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TripStopsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripStopsRepository extends _i1.Mock
    implements _i3.TripStopsRepository {
  @override
  _i4.Future<_i2.Either<_i5.TripStopsFailure, void>> addTripStop({
    required String? tripId,
    required String? dayTripId,
    required String? name,
    String? description,
    required _i6.LatLng? location,
    required _i7.TimeOfDay? startTime,
    required _i7.TimeOfDay? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTripStop,
          [],
          {
            #tripId: tripId,
            #dayTripId: dayTripId,
            #name: name,
            #description: description,
            #location: location,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.TripStopsFailure, void>>.value(
            _FakeEither_0<_i5.TripStopsFailure, void>(
          this,
          Invocation.method(
            #addTripStop,
            [],
            {
              #tripId: tripId,
              #dayTripId: dayTripId,
              #name: name,
              #description: description,
              #location: location,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.TripStopsFailure, void>>.value(
                _FakeEither_0<_i5.TripStopsFailure, void>(
          this,
          Invocation.method(
            #addTripStop,
            [],
            {
              #tripId: tripId,
              #dayTripId: dayTripId,
              #name: name,
              #description: description,
              #location: location,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.TripStopsFailure, void>>);
}
